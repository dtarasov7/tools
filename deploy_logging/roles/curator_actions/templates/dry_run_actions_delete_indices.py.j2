#!/usr/bin/env python
### ANSIBLE MANAGED

import os
import docker
import time
import requests
import sys
import re
import urllib3
{% if telegram['send_msg'] is defined and telegram['send_msg'] | default('false') %}
import platform
{% endif %}
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

CURATOR_IMAGE = "{{ curator['image'] }}"
{% if email['send_msg'] is defined and email['send_msg'] | default('false') %}
MUTT_IMAGE = "{{ mutt['image'] }}"
SENT_EMAIL_TO = "{{ email['send_to'] }}"
{% endif %}
{% if telegram['send_msg'] is defined and telegram['send_msg'] | default('false') %}
BOT_TOKEN = "{{ telegram['bot_token'] }}"
CHAT_ID = "{{ telegram['chat_id'] }}"
API_URL = f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage'
CURATOR_HOST = platform.node()
{% endif %}
ACTION_LIST = [{% for item in curator_delete_indices %}"{{ item['action'] }}"{% if not loop.last %},{% endif %}{% endfor %}]
CURRENT_DATE = time.strftime("%Y-%m-%d")

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏–Ω–∞—á–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
try:
    run_curl = requests.get('https://{{ ansible_host }}:{{ opensearch['port0'] | default('9200') }}/_cluster/health?pretty=true', auth=('{{ opensearch['admin_user'] | default('admin') }}', '{{ opensearch['admin_passwd'] }}'), verify=False)
    run_curl.raise_for_status()
except requests.exceptions.HTTPError as err:
    raise SystemExit(err)
    sys.exit()

# –≤—ã–ø–æ–ª–Ω—è–µ–º {action}.yml –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ {CURATOR_IMAGE}
docker_client = docker.from_env()
for action in ACTION_LIST:
    try:
        docker_client.containers.run(CURATOR_IMAGE, remove=True, name='curator', volumes=["{{ opensearch_data_dir }}/curator/config.yml:/opt/config.yml",f"{{ opensearch_data_dir }}/curator/{action}.yml:/opt/action.yml","{{ opensearch_data_dir }}/curator/log:/var/log"], environment=["LC_ALL=C.UTF-8","LANG=C.UTF-8","TZ=Europe/Moscow"], command="--config /opt/config.yml --dry-run /opt/action.yml")
    except docker.errors.ContainerError:
        print(f"Something went wrong (ContainerError).")
        continue

{% if telegram['send_msg'] is defined and telegram['send_msg'] | default('false') %}
# –∏—â–µ–º —Å–ª–æ–≤–æ ERROR –≤ —Å—Ç—Ä–æ–∫–∞—Ö —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π {CURRENT_DATE}
pattern = re.compile(f"{CURRENT_DATE}.*.ERROR")
for lines in open("{{ opensearch_data_dir }}/curator/log/curator.log"):
    for match in re.finditer(pattern, lines):
        result = lines
try:
    result
    print(f"Errors in the log file for current date. Check the log file.")
    try:
        response = requests.post(API_URL, json={'chat_id': CHAT_ID, 'text': f"üî¥ Curator\n–•–æ—Å—Ç: {CURATOR_HOST}\n–î–∞—Ç–∞: {CURRENT_DATE}\n–°–æ–æ–±—â–µ–Ω–∏–µ: –≤ –ª–æ–≥–∞—Ö –∏–º–µ—é—Ç—Å—è –æ—à–∏–±–∫–∏ ERROR –∑–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å curator.log —Ñ–∞–π–ª."})
        #print(response.text)
    except Exception as e:
        print(e)
except NameError:
    print(f"No errors in the log file for current date.")
{% endif %}

# –∏—â–µ–º —Å–ª–æ–≤–æ Deleting indices –≤ —Å—Ç—Ä–æ–∫–∞—Ö —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π {CURRENT_DATE}
deleting_indices = re.compile(f"{CURRENT_DATE}.*.Deleting.*.indices")
indices_list = []
for ind in open("{{ opensearch_data_dir }}/curator/log/curator.log"):
    for match in re.finditer(deleting_indices, ind):
        indice = ( ' '.join(re.findall(r'(?<=\[)[^\]]+', ind)) )
        indices_list.append(indice)
        ind_result = ind
try:
    ind_result
    print(f"Deleted indices: {indices_list}.")
{% if email['send_msg'] is defined and email['send_msg'] | default('false') %}
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –¥–ª—è –∞–¥—Ä–µ—Å–∞—Ç–æ–≤ {SENT_EMAIL_TO}, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –∑–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É {CURRENT_DATE} —Å–æ —Å–ª–æ–≤–æ–º *.Deleting.*.indices
    with open('{{ opensearch_data_dir }}/curator/.muttrc', 'w') as s:
        s.write(f"set from = 'curator@rshbcloud.ru'\nset realname = 'Curator opensearch'\nset ssl_starttls = no\nset use_from = yes\nset smtp_authenticators='plain'\nset ssl_force_tls = no\nset smtp_url = '{{ email['smtp_url'] }}'")
    with open('{{ opensearch_data_dir }}/curator/mutt_indices_msg.txt', 'w') as f:
        f.write(f"Curator host: {CURATOR_HOST}\nDate: {CURRENT_DATE}\nDeleted indices: {indices_list}") 
    try:
        docker_client.containers.run(MUTT_IMAGE, remove=True, name='mutt', volumes=["{{ opensearch_data_dir }}/curator/mutt_indices_msg.txt:/msg.txt","{{ opensearch_data_dir }}/curator/.muttrc:/.muttrc"], environment=["TZ=Europe/Moscow"], command=f"mutt -s 'Curator: list of deleted indices' -F /.muttrc -i /msg.txt -- {SENT_EMAIL_TO}")
    except docker.errors.ContainerError:
        print(f"Something went wrong (ContainerError).")
{% endif %}
except NameError:
    print(f"No indices for delete.")