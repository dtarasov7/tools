–í–æ—Ç –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–∏–º–µ—Ä –æ–±–µ–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å `auth.py`, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π **SHA-256 —Ö–µ—à** –≤–º–µ—Å—Ç–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞.

---

## üß† –ö–æ–Ω—Ü–µ–ø—Ü–∏—è:

- **–ö–ª—é—á `topsecretkey`** —Ö—ç—à–∏—Ä—É–µ—Ç—Å—è –∏ **–Ω–µ —Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç —è–≤–Ω–æ –≤ –∫–æ–¥–µ**.
- –ú–æ–¥—É–ª—å `auth.py` –∑–Ω–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ–≥–æ —Ö–µ—à.
- –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ–∫—Ä–µ—Ç, —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ö–µ—à.
- –í—Å—ë –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –≤ —Ñ–∞–π–ª `vault_reader.log`.

---

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:

```
project/
‚îÇ
‚îú‚îÄ‚îÄ auth.py
‚îú‚îÄ‚îÄ vault_reader.py
‚îú‚îÄ‚îÄ vault_client.py
‚îú‚îÄ‚îÄ secret.vault
‚îî‚îÄ‚îÄ vault_reader.log (—Å–æ–∑–¥–∞—ë—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
```

---

## üîê `auth.py` ‚Äî –º–æ–¥—É–ª—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∫—Ä–µ—Ç–∞ (–±–µ–∑ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è)

```python
# auth.py
import hashlib

# –≠—Ç–æ sha256('topsecretkey')
_EXPECTED_HASH = "3c189e4fbd4a94b4de28e514438f61868aeb6e0a46339c986b6a807a860b1d95"

def verify_key(user_input):
    return hashlib.sha256(user_input.encode()).hexdigest() == _EXPECTED_HASH
```

---

## üß∑ `vault_reader.py` ‚Äî —Å–µ—Ä–≤–µ—Ä

```python
# vault_reader.py
import socket
import os
import sys
import logging
from ansible_vault import Vault
import auth  # –º–æ–¥—É–ª—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∫—Ä–µ—Ç–∞

SOCKET_PATH = "/tmp/vault_socket"
VAULT_FILE = "secret.vault"
LOG_FILE = "vault_reader.log"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename=LOG_FILE,
    filemode='a',
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s'
)

def decrypt_vault_file(password):
    try:
        with open(VAULT_FILE, "r") as f:
            encrypted_data = f.read()
        vault = Vault(password)
        decrypted_data = vault.load(encrypted_data)
        logging.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω.")
        return decrypted_data
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ: {e}")
        sys.exit(1)

def handle_connection(conn, decrypted_data):
    try:
        auth_key = conn.recv(1024).decode().strip()
        if not auth.verify_key(auth_key):
            logging.warning("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞.")
            conn.sendall(b"AUTH FAILED")
        else:
            logging.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ. –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
            conn.sendall(decrypted_data.encode())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
    finally:
        conn.close()

def start_server(decrypted_data):
    if os.path.exists(SOCKET_PATH):
        os.remove(SOCKET_PATH)

    with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as server:
        server.bind(SOCKET_PATH)
        server.listen(1)
        os.chmod(SOCKET_PATH, 0o600)
        logging.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω. –°–æ–∫–µ—Ç: {SOCKET_PATH}")

        while True:
            try:
                conn, _ = server.accept()
                handle_connection(conn, decrypted_data)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")

def main():
    if not os.path.exists(VAULT_FILE):
        logging.error(f"–§–∞–π–ª {VAULT_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        sys.exit(1)

    try:
        password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è Ansible Vault: ")
        decrypted = decrypt_vault_file(password)
        start_server(decrypted)
    except Exception as e:
        logging.critical(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
```

---

## üîë `vault_client.py` ‚Äî –∫–ª–∏–µ–Ω—Ç

```python
# vault_client.py
import socket

SOCKET_PATH = "/tmp/vault_socket"
SHARED_SECRET = "topsecretkey"  # –≠—Ç–æ –∑–Ω–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç

def main():
    try:
        with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as client:
            client.connect(SOCKET_PATH)
            client.sendall(SHARED_SECRET.encode())
            data = client.recv(65536).decode()

        if data == "AUTH FAILED":
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.")
        else:
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n")
            print(data)

    except FileNotFoundError:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ —Å–æ–∫–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")

if __name__ == "__main__":
    main()
```

---

## üß™ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞:

1. –£—Å—Ç–∞–Ω–æ–≤–∏ –º–æ–¥—É–ª—å:
   ```bash
   pip install ansible-vault
   ```

2. –°–æ–∑–¥–∞–π –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª:
   ```bash
   ansible-vault create secret.vault
   ```

3. –í–≤–µ–¥–∏ —Ç—É–¥–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

4. –ó–∞–ø—É—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä:
   ```bash
   python3 vault_reader.py
   ```

5. –ó–∞—Ç–µ–º –∫–ª–∏–µ–Ω—Ç:
   ```bash
   python3 vault_client.py
   ```

---

–ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –º–æ–≥—É:
- –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
- –í—ã–Ω–µ—Å—Ç–∏ `auth.py` –≤ –±–∏–Ω–∞—Ä–Ω–∏–∫ —á–µ—Ä–µ–∑ Cython
- –°–¥–µ–ª–∞—Ç—å –ª–æ–≥–≥–µ—Ä —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤

–ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å :)