
workflow:
  rules:
#    - if: '$CI_PIPELINE_SOURCE != "web"'
#      when: never
    - if: '"$CI_COMMIT_TAG" == ""'
      when: never
    - when: always


variables:
  DI: 10.80.4.6:1000/docker:24.0.7-util-02

.parse_tag: 
  before_script:
    - echo $CI_COMMIT_TAG
#    - export APP_COMMIT=$(git rev-parse HEAD)
#    - export APP_VERSION=$(git tag --points-at HEAD)
#    - echo $APP_COMMIT
#    - echo $APP_VERSION
    - |
     if [ "$CI_COMMIT_TAG" == "" ]; then
        exit 1
      else
        if [[ $CI_COMMIT_TAG =~ ^([0-9]+\.[0-9]+\.[0-9]+[-RC0-9]*)-DEV.+$ ]]; then
          export ENV=dev
          export ENVCUT=dev
          export IMAGE_TAG=${BASH_REMATCH[1]}
        else
          if [[ $CI_COMMIT_TAG =~ ^([0-9]+\.[0-9]+\.[0-9]+[-RC0-9]*)-TEST.+$ ]]; then
            export ENV=test
            export ENVCUT=test
            export IMAGE_TAG=${BASH_REMATCH[1]}
          else
            if [[ $CI_COMMIT_TAG =~ ^([0-9]+\.[0-9]+\.[0-9]+[-RC0-9]*)-PREPROD.+$ ]]; then
              export ENV=preprod
              export ENVCUT=preprod
              export IMAGE_TAG=${BASH_REMATCH[1]}
            else
              if [[ $CI_COMMIT_TAG =~ ^([0-9]+\.[0-9]+\.[0-9]+[-RC0-9]*)-LT.+$ ]]; then
                export ENV=lt
                export ENVCUT=lt
                export IMAGE_TAG=${BASH_REMATCH[1]}
              else
                if [[ $CI_COMMIT_TAG =~ ^([0-9]+\.[0-9]+\.[0-9]+[-RC0-9]*)-PROD.+$ ]]; then
                  export ENV=prod
                  export ENVCUT=prod
                  export IMAGE_TAG=${BASH_REMATCH[1]}
                else
                  if [[ $CI_COMMIT_TAG =~ ^([0-9]+\.[0-9]+\.[0-9]+[-RC0-9]*)-2PROD.+$ ]]; then
                    export ENV=prod-2
                    export ENVCUT=prod
                    export IMAGE_TAG=${BASH_REMATCH[1]}
                  fi
                fi
              fi
            fi
          fi
        fi
      fi
    - echo $ENV
    - echo $IMAGE_TAG
#    - exit 0

.copy_image_script:
  script:
    - if [ "$IMAGE_TAG" == "" ]; then exit 1; fi
    - echo $SERVICE_NAME
    - echo $IMAGE_NAME
    - echo $CI_REGISTRY_IMAGE
    - echo $IMAGE_TAG
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker manifest inspect  ${CI_REGISTRY_IMAGE}:${IMAGE_TAG} > /dev/null  && rcode=$? || true
    - echo $rcode
#    - echo ${IMAGE_NAME}:${IMAGE_TAG}
    - | 
      if [ ! $rcode ]; then
        docker pull ${IMAGE_NAME}:${IMAGE_TAG}
        docker tag  ${IMAGE_NAME}:${IMAGE_TAG} ${CI_REGISTRY_IMAGE}:${IMAGE_TAG}
        docker push ${CI_REGISTRY_IMAGE}:${IMAGE_TAG}
        docker image rm -f ${IMAGE_NAME}:${IMAGE_TAG}
        docker image rm -f ${CI_REGISTRY_IMAGE}:${IMAGE_TAG}
      else
        echo "${CI_REGISTRY_IMAGE}:${IMAGE_TAG} - already in registry !"
      fi

.build_image_script:
  script:
    - if [ "$IMAGE_TAG" == "" ]; then exit 1; fi
    - echo $SERVICE_NAME
    - echo $IMAGE_NAME
    - echo $CI_REGISTRY_IMAGE
    - echo $IMAGE_TAG
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker manifest inspect  ${CI_REGISTRY_IMAGE}:${IMAGE_TAG} > /dev/null  && rcode=$? || true
    - echo $rcode
#    - echo ${IMAGE_NAME}:${IMAGE_TAG}
    - | 
      if [ ! $rcode ]; then
        docker build . --build-arg IMAGE_TAG=${IMAGE_TAG} -t ${CI_REGISTRY_IMAGE}:${IMAGE_TAG}
        #docker tag  ${IMAGE_NAME}:${IMAGE_TAG} ${CI_REGISTRY_IMAGE}:${IMAGE_TAG}
        docker push ${CI_REGISTRY_IMAGE}:${IMAGE_TAG}
        #docker image rm -f ${IMAGE_NAME}:${IMAGE_TAG}
        docker image rm -f ${CI_REGISTRY_IMAGE}:${IMAGE_TAG}
      else
        echo "${CI_REGISTRY_IMAGE}:${IMAGE_TAG} - already in registry !"
      fi

.make_helm_script:
  script:
    - export HELM_TAG=$(yq -e ".$ENV.helm" helm_versions.yaml)
    - echo $HELM_TAG
    - if [ "$IMAGE_TAG" == "" ]; then exit 1; fi
    - if [ "$HELM_TAG" == "" ]; then exit 1; fi
    - if [ "$ENV" == "" ]; then exit 1; fi
    - |
      if [ ! -f values-$ENV.yaml ]; then 
        echo "Нет файла с параметрами values-$ENV.yaml"
        exit 1
      fi
    - rm -rf helm-template
    - git clone https://oauth2:${READ_HELM_TEMPLATE}@gitlab.sz.rshbcloud.ru/mps/appfarm/helm-template.git
    - rm -rf charts/$ENV/
    - mkdir -p charts/$ENV/
    - cp -r helm-template/$HELM_TAG/* charts/$ENV/
    - rm -rf helm-template
    - rm -f charts/$ENV/values.yaml
    - cp values-$ENV.yaml charts/$ENV/values.yaml
#    - ls -lar charts/$ENV/
    - find charts/$ENV/* -type f | xargs -I {} sh -c "envsubst '\$ENV,\$ENVCUT,\$SERVICE_NAME,\$HELM_TAG,\$IMAGE_TAG,\$CI_COMMIT_TAG'< '{}' > '{}'.tmp; mv '{}'.tmp '{}'"
    - chmod +x charts/$ENV/*.sh
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git add -v -A .
    - git commit -m "[skip ci]$ENV"
    - git push -o ci.skip "https://oauth2:${GIT_PUSH}@${CI_REPOSITORY_URL#*@}" HEAD:master
