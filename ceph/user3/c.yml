# --- Проверяем существование пользователей ---
- name: Проверяем пользователей в проекте {{ project.name }}
  ansible.builtin.shell: |
    radosgw-admin user info --uid={{ item.name }} 2>/dev/null || echo "USER_NOT_FOUND"
  register: user_info
  changed_when: false
  with_items: "{{ project.users }}"

- name: Создаём пользователей в {{ project.name }}
  ansible.builtin.shell: |
    radosgw-admin user create --uid={{ item.0.name }} \
      --display-name="{{ item.0.name }}" \
      --placement-id={{ project.placement }} \
      --caps="{{ item.0.caps }}"
  when: "'USER_NOT_FOUND' in item.1.stdout"
  with_together:
    - "{{ project.users }}"
    - "{{ user_info.results }}"
  register: user_creation

- name: Обновляем caps у существующих пользователей в {{ project.name }}
  ansible.builtin.shell: |
    radosgw-admin user modify --uid={{ item.0.name }} --caps="{{ item.0.caps }}"
  when: "'USER_NOT_FOUND' not in item.1.stdout"
  with_together:
    - "{{ project.users }}"
    - "{{ user_info.results }}"
  register: user_caps_update
  changed_when: "'caps' in user_caps_update.stdout"

# --- Цикл по бакетам ---
- name: Создание бакетов в {{ project.name }}
  ansible.builtin.shell: |
    AWS_ACCESS_KEY_ID={{ project.admin.access_key }} \
    AWS_SECRET_ACCESS_KEY={{ project.admin.secret_key }} \
    aws --endpoint-url {{ ceph_endpoint }} s3api create-bucket --bucket {{ item.name }}
  with_items: "{{ project.buckets }}"
  register: bucket_creation
  changed_when: "'Bucket' in bucket_creation.stdout"

# --- Обновление политик пользователей ---
- name: Получаем текущие политики пользователей в {{ project.name }}
  ansible.builtin.shell: |
    AWS_ACCESS_KEY_ID={{ project.admin.access_key }} \
    AWS_SECRET_ACCESS_KEY={{ project.admin.secret_key }} \
    aws --endpoint-url {{ ceph_endpoint }} iam list-user-policies --user-name {{ item.name }} | jq -r '.PolicyNames[]'
  register: current_policies
  with_items: "{{ project.users }}"
  changed_when: false

- name: Удаляем ненужные политики в {{ project.name }}
  ansible.builtin.shell: |
    AWS_ACCESS_KEY_ID={{ project.admin.access_key }} \
    AWS_SECRET_ACCESS_KEY={{ project.admin.secret_key }} \
    aws --endpoint-url {{ ceph_endpoint }} iam delete-user-policy \
      --user-name {{ item.0.name }} --policy-name {{ item.1 }}
  when: item.1 not in item.0.policies | map(attribute='name')
  with_subelements:
    - "{{ project.users }}"
    - current_policies.stdout_lines

- name: Назначаем политики пользователям в {{ project.name }}
  ansible.builtin.shell: |
    cat > /tmp/policy_{{ item.0.name }}.json <<EOF
    {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Sid": "{{ item.1.sid }}",
          "Effect": "{{ item.1.effect | capitalize }}",
          "Action": {{ item.1.action | to_json }},
          "Resource": {{ item.1.resource | to_json }}
        }
      ]
    }
    EOF
    AWS_ACCESS_KEY_ID={{ project.admin.access_key }} \
    AWS_SECRET_ACCESS_KEY={{ project.admin.secret_key }} \
    aws --endpoint-url {{ ceph_endpoint }} iam put-user-policy \
      --user-name {{ item.0.name }} \
      --policy-name {{ item.1.name }} \
      --policy-document file:///tmp/policy_{{ item.0.name }}.json
  with_subelements:
    - "{{ project.users }}"
    - policies
  register: policy_assignment
  changed_when: "'Policy' in policy_assignment.stdout"

# --- Отключение пользователей, которых нет в Project ---
- name: Приостанавливаем пользователей, не указанных в {{ project.name }}
  ansible.builtin.shell: |
    radosgw-admin user suspend --uid={{ item }}
  when: item not in project.users | map(attribute='name')
  with_items: "{{ existing_users_list }}"

