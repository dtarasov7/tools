–ù–∞–ø–∏—à–∏ –∫–æ–¥ –Ω–∞ python3 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ boto3 , –∫–æ—Ç–æ—Ä—ã–π ceph —Å–æ–∑–¥–∞–µ—Ç –±–∞–∫–µ—Ç, –ø–∏—à–µ—Ç —Ç—É–¥–∞ –æ–±—ä–µ–∫—Ç—ã, —á–∏—Ç–∞–µ—Ç —ç—Ç–∏ –æ–±—ä–µ–∫—Ç—ã –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏ –ø–æ—Ç–æ–º —É–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç—ã.
–ü—Ä–∏ —ç—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ (—Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤), –∏—Ö —Ä–∞–∑–º–µ—Ä, –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –∑–∞–¥–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –∏ —á—Ç–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ (–∫–∞–∫ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, —Ç–∞–∫ –∏ –ø–∞–∫–µ—Ç–∞) , —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –∏ —á—Ç–µ–Ω–∏—è.
–í –∫–æ–Ω—Ü–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –∏ —á—Ç–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ (–∫–∞–∫ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, —Ç–∞–∫ –∏ –ø–∞–∫–µ—Ç–∞) ,  —Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –∏ —á—Ç–µ–Ω–∏—è


ChatGPT —Å–∫–∞–∑–∞–ª:
–í–æ—Ç –∫–æ–¥ –Ω–∞ Python 3 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º boto3, –∫–æ—Ç–æ—Ä—ã–π:

–°–æ–∑–¥–∞—ë—Ç S3-–±–∞–∫–µ—Ç –≤ Ceph

–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã (–ø–∞–∫–µ—Ç–∞–º–∏)

–ß–∏—Ç–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ

–£–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç—ã

–ó–∞–º–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è

–ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏:

--batch_size ‚Üí —Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ø–∞–∫–µ—Ç–µ

--object_size ‚Üí —Ä–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (–≤ –ö–ë)

--iterations ‚Üí –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è

üìú –ö–æ–¥:
python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
import boto3
import time
import random
import argparse
import os
import string

# –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parser = argparse.ArgumentParser(description="Ceph S3 Performance Test")
parser.add_argument("--batch_size", type=int, default=10, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º –ø–∞–∫–µ—Ç–µ")
parser.add_argument("--object_size", type=int, default=1024, help="–†–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –ö–ë")
parser.add_argument("--iterations", type=int, default=5, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è")
parser.add_argument("--bucket_name", type=str, default="test-bucket", help="–ò–º—è S3-–±–∞–∫–µ—Ç–∞")
parser.add_argument("--endpoint_url", type=str, default="http://localhost:8000", help="URL Ceph RadosGW")
parser.add_argument("--access_key", type=str, default="your-access-key", help="S3 Access Key")
parser.add_argument("--secret_key", type=str, default="your-secret-key", help="S3 Secret Key")
args = parser.parse_args()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ceph S3
s3 = boto3.client(
    "s3",
    endpoint_url=args.endpoint_url,
    aws_access_key_id=args.access_key,
    aws_secret_access_key=args.secret_key
)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏
def generate_data(size_kb):
    return os.urandom(size_kb * 1024)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
def random_string(length=10):
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=length))

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞
def create_bucket():
    s3.create_bucket(Bucket=args.bucket_name)

# –ó–∞–ø–∏—Å—å –æ–±—ä–µ–∫—Ç–æ–≤
def upload_objects():
    object_keys = []
    total_time = 0
    total_size = 0

    for _ in range(args.iterations):
        start_batch = time.time()
        
        for _ in range(args.batch_size):
            key = f"object-{random_string()}.bin"
            data = generate_data(args.object_size)

            start = time.time()
            s3.put_object(Bucket=args.bucket_name, Key=key, Body=data)
            end = time.time()

            object_keys.append(key)
            obj_time = end - start
            total_time += obj_time
            total_size += args.object_size

            print(f"–ó–∞–ø–∏—Å–∞–Ω –æ–±—ä–µ–∫—Ç: {key}, –í—Ä–µ–º—è: {obj_time:.4f} —Å–µ–∫")

        end_batch = time.time()
        print(f"üìù –ü–∞–∫–µ—Ç {args.batch_size} –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞–ø–∏—Å–∞–Ω –∑–∞ {end_batch - start_batch:.4f} —Å–µ–∫")

    avg_time = total_time / (args.batch_size * args.iterations)
    speed = total_size / total_time
    print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –æ–±—ä–µ–∫—Ç–∞: {avg_time:.4f} —Å–µ–∫, –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.2f} KB/s")

    return object_keys

# –ß—Ç–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
def read_objects(object_keys):
    random.shuffle(object_keys)
    total_time = 0
    total_size = 0

    for _ in range(args.iterations):
        start_batch = time.time()

        for key in object_keys:
            start = time.time()
            s3.get_object(Bucket=args.bucket_name, Key=key)
            end = time.time()

            obj_time = end - start
            total_time += obj_time
            total_size += args.object_size

            print(f"–ü—Ä–æ—á–∏—Ç–∞–Ω –æ–±—ä–µ–∫—Ç: {key}, –í—Ä–µ–º—è: {obj_time:.4f} —Å–µ–∫")

        end_batch = time.time()
        print(f"üìñ –ü–∞–∫–µ—Ç {args.batch_size} –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–æ—á–∏—Ç–∞–Ω –∑–∞ {end_batch - start_batch:.4f} —Å–µ–∫")

    avg_time = total_time / len(object_keys)
    speed = total_size / total_time
    print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞: {avg_time:.4f} —Å–µ–∫, –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.2f} KB/s")

# –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
def delete_objects(object_keys):
    for key in object_keys:
        s3.delete_object(Bucket=args.bucket_name, Key=key)
        print(f"–£–¥–∞–ª–µ–Ω –æ–±—ä–µ–∫—Ç: {key}")

    s3.delete_bucket(Bucket=args.bucket_name)
    print("üóëÔ∏è –ë–∞–∫–µ—Ç —É–¥–∞–ª–µ–Ω.")

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
def main():
    print("üîπ –°–æ–∑–¥–∞—ë–º –±–∞–∫–µ—Ç...")
    create_bucket()

    print("üîπ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã...")
    object_keys = upload_objects()

    print("üîπ –ß–∏—Ç–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ...")
    read_objects(object_keys)

    print("üîπ –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã...")
    delete_objects(object_keys)

if __name__ == "__main__":
    main()
üîß –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?
bash
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
python3 test_ceph_s3.py --batch_size 20 --object_size 512 --iterations 10 \
 --bucket_name my-test-bucket --endpoint_url http://ceph-rgw:8000 \
 --access_key YOUR_KEY --secret_key YOUR_SECRET
üîπ batch_size ‚Üí –°–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∑–∞ —Ä–∞–∑
üîπ object_size ‚Üí –†–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (–≤ –ö–ë)
üîπ iterations ‚Üí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è

üìä –ß—Ç–æ –≤—ã–¥–∞—ë—Ç –∫–æ–¥?
‚úÖ –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
‚úÖ –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –æ–±—ä–µ–∫—Ç–æ–≤
‚úÖ –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
‚úÖ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –∏ —á—Ç–µ–Ω–∏—è

üëâ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Ceph RadosGW. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏ ‚Äî –ø–∏—à–∏! üòä







–í—ã —Å–∫–∞–∑–∞–ª–∏:
–£ —Ç–µ–±—è object_keys.append(key) –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä–µ–∫—Ç key.
–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º—ã –ø–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ , –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ç—Ä–æ–≥–æ —Å–º–æ—Ç—Ä—è –Ω–∞  –æ–¥–Ω—É –∏ —Ç—É–∂–µ –æ–±–ª–∞—Å—Ç—å –ø–∞–º—è—Ç–∏ —Å –∏–º–µ–Ω–µ–º key
–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π –∫–æ–¥


ChatGPT —Å–∫–∞–∑–∞–ª:
–¢—ã –ø—Ä–∞–≤! –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–ø–∏—é —Å—Ç—Ä–æ–∫–∏, –∞ –Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–º–µ–Ω—è–µ–º—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é. –ò—Å–ø—Ä–∞–≤–∏–ª —ç—Ç–æ, —Ç–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –∫–ª—é—á –≤ object_keys ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.

–í–æ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥:

python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
import boto3
import time
import random
import argparse
import os
import string

# –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parser = argparse.ArgumentParser(description="Ceph S3 Performance Test")
parser.add_argument("--batch_size", type=int, default=10, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º –ø–∞–∫–µ—Ç–µ")
parser.add_argument("--object_size", type=int, default=1024, help="–†–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –ö–ë")
parser.add_argument("--iterations", type=int, default=5, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è")
parser.add_argument("--bucket_name", type=str, default="test-bucket", help="–ò–º—è S3-–±–∞–∫–µ—Ç–∞")
parser.add_argument("--endpoint_url", type=str, default="http://localhost:8000", help="URL Ceph RadosGW")
parser.add_argument("--access_key", type=str, default="your-access-key", help="S3 Access Key")
parser.add_argument("--secret_key", type=str, default="your-secret-key", help="S3 Secret Key")
args = parser.parse_args()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ceph S3
s3 = boto3.client(
    "s3",
    endpoint_url=args.endpoint_url,
    aws_access_key_id=args.access_key,
    aws_secret_access_key=args.secret_key
)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏
def generate_data(size_kb):
    return os.urandom(size_kb * 1024)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
def random_string(length=10):
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=length))

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞
def create_bucket():
    s3.create_bucket(Bucket=args.bucket_name)

# –ó–∞–ø–∏—Å—å –æ–±—ä–µ–∫—Ç–æ–≤
def upload_objects():
    object_keys = []
    total_time = 0
    total_size = 0

    for _ in range(args.iterations):
        start_batch = time.time()
        
        for _ in range(args.batch_size):
            key = f"object-{random_string()}.bin"
            data = generate_data(args.object_size)

            start = time.time()
            s3.put_object(Bucket=args.bucket_name, Key=key, Body=data)
            end = time.time()

            object_keys.append(key[:])  # –§–∏–∫—Å: –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ø–∏—é —Å—Ç—Ä–æ–∫–∏, –∞ –Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä–µ–∫—Ç
            obj_time = end - start
            total_time += obj_time
            total_size += args.object_size

            print(f"–ó–∞–ø–∏—Å–∞–Ω –æ–±—ä–µ–∫—Ç: {key}, –í—Ä–µ–º—è: {obj_time:.4f} —Å–µ–∫")

        end_batch = time.time()
        print(f"üìù –ü–∞–∫–µ—Ç {args.batch_size} –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞–ø–∏—Å–∞–Ω –∑–∞ {end_batch - start_batch:.4f} —Å–µ–∫")

    avg_time = total_time / (args.batch_size * args.iterations)
    speed = total_size / total_time
    print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –æ–±—ä–µ–∫—Ç–∞: {avg_time:.4f} —Å–µ–∫, –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.2f} KB/s")

    return object_keys

# –ß—Ç–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
def read_objects(object_keys):
    random.shuffle(object_keys)
    total_time = 0
    total_size = 0

    for _ in range(args.iterations):
        start_batch = time.time()

        for key in object_keys:
            start = time.time()
            s3.get_object(Bucket=args.bucket_name, Key=key)
            end = time.time()

            obj_time = end - start
            total_time += obj_time
            total_size += args.object_size

            print(f"–ü—Ä–æ—á–∏—Ç–∞–Ω –æ–±—ä–µ–∫—Ç: {key}, –í—Ä–µ–º—è: {obj_time:.4f} —Å–µ–∫")

        end_batch = time.time()
        print(f"üìñ –ü–∞–∫–µ—Ç {args.batch_size} –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–æ—á–∏—Ç–∞–Ω –∑–∞ {end_batch - start_batch:.4f} —Å–µ–∫")

    avg_time = total_time / len(object_keys)
    speed = total_size / total_time
    print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞: {avg_time:.4f} —Å–µ–∫, –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.2f} KB/s")

# –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
def delete_objects(object_keys):
    for key in object_keys:
        s3.delete_object(Bucket=args.bucket_name, Key=key)
        print(f"–£–¥–∞–ª–µ–Ω –æ–±—ä–µ–∫—Ç: {key}")

    s3.delete_bucket(Bucket=args.bucket_name)
    print("üóëÔ∏è –ë–∞–∫–µ—Ç —É–¥–∞–ª–µ–Ω.")

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
def main():
    print("üîπ –°–æ–∑–¥–∞—ë–º –±–∞–∫–µ—Ç...")
    create_bucket()

    print("üîπ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã...")
    object_keys = upload_objects()

    print("üîπ –ß–∏—Ç–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ...")
    read_objects(object_keys)

    print("üîπ –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã...")
    delete_objects(object_keys)

if __name__ == "__main__":
    main()
–¢–µ–ø–µ—Ä—å object_keys.append(key[:]) –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ø–∞–¥–∞—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, –∞ –Ω–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–¥–Ω—É –∏ —Ç—É –∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é. üöÄ







–í—ã —Å–∫–∞–∑–∞–ª–∏:
–ê –ø–æ—á–µ–º—É –ø—Ä–æ—Å—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ .copy() ?


ChatGPT —Å–∫–∞–∑–∞–ª:
–ú–µ—Ç–æ–¥ .copy() —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–º–µ–Ω—è–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, list, dict –∏ set).

–ù–æ —Å—Ç—Ä–æ–∫–∏ (str) –≤ Python ‚Äî —ç—Ç–æ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π —Ç–∏–ø. –ü–æ—ç—Ç–æ–º—É —É –Ω–∏—Ö –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ .copy(), –∏ –æ–Ω –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É:

python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
key = "example-key"
key.copy()  # AttributeError: 'str' object has no attribute 'copy'
–í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é —Å—Ç—Ä–æ–∫–∏, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:

key[:] ‚Äì —Å—Ä–µ–∑ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏ (—Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, –Ω–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ –¥–ª—è str)

str(key) ‚Äì —è–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞

key + "" ‚Äì –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π (–æ–±—ã—á–Ω–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ)

–ù–æ –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —ç—Ç–æ –≤–æ–æ–±—â–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ö–æ–≥–¥–∞ –º—ã –¥–µ–ª–∞–µ–º object_keys.append(key), —Å—Ç—Ä–æ–∫–∞ —É–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç, —Ç–∞–∫ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –≤ Python –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã –∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é.

–¢–æ –µ—Å—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ–¥ –±—ã–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º:

python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
object_keys.append(key)
–û—à–∏–±–∫–∏ –Ω–µ –±—ã–ª–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ Python —Å–∞–º —Å–æ–∑–¥–∞—ë—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–∫–µ. üòä







–í—ã —Å–∫–∞–∑–∞–ª–∏:
–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π –∫–æ–¥, —á—Ç–æ–±—ã –≤ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è–ª–∏—Å—å –æ–±—ä–µ–∫—Ç—ã, —á–∏—Ç–∞–ª–∏—Å—å –æ–±—ä–µ–∫—Ç—ã (–≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ) –∏ —É–¥–∞–ª—è–ª–∏—Å—å –æ–±—ä–µ–∫—Ç—ã. –¢–æ –µ—Å—Ç—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –±–∞–∫–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º.
–ö—Ä–æ–º–µ —Ç–æ–≥–æ –¥–æ–±–∞–≤—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –ø—Ä–∏ –≤—ã–∑–æ–≤–µ api ceph radosgw


ChatGPT —Å–∫–∞–∑–∞–ª:
–í–æ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π:

–í –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç, —á–∏—Ç–∞–µ—Ç (–≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ) –∏ —É–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç—ã.

–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –±–∞–∫–µ—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –ø—É—Å—Ç—ã–º.

–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ API Ceph RadosGW (botocore.exceptions).

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ boto3:

bash
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
pip install boto3
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç, –ø–µ—Ä–µ–¥–∞–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:

bash
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
python3 script.py <bucket_name> <num_objects> <object_size> <num_iterations>
–ö–æ–¥:
python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
import boto3
import os
import random
import time
import sys
from botocore.exceptions import BotoCoreError, ClientError

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
def measure_time(func, *args, **kwargs):
    start = time.time()
    result = func(*args, **kwargs)
    elapsed = time.time() - start
    return result, elapsed

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ API S3
def safe_call(func, *args, **kwargs):
    try:
        return func(*args, **kwargs)
    except (BotoCoreError, ClientError) as e:
        print(f"–û—à–∏–±–∫–∞ API Ceph RadosGW: {e}")
        return None

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞
def s3_test(bucket_name, num_objects, object_size, num_iterations):
    s3 = boto3.client(
        "s3",
        endpoint_url="http://ceph-rgw.example.com",  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Ceph RadosGW
        aws_access_key_id="your-access-key",
        aws_secret_access_key="your-secret-key"
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞
    safe_call(s3.create_bucket, Bucket=bucket_name)

    for iteration in range(1, num_iterations + 1):
        print(f"\n=== –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration} ===")

        object_keys = []
        write_times, read_times, delete_times = [], [], []

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤
        for i in range(num_objects):
            key = f"object-{iteration}-{i}"
            object_keys.append(key)
            data = os.urandom(object_size)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            
            _, elapsed = measure_time(
                safe_call, s3.put_object, Bucket=bucket_name, Key=key, Body=data
            )
            if elapsed:
                write_times.append(elapsed)

        print(f"–ó–∞–ø–∏—Å–∞–Ω–æ {num_objects} –æ–±—ä–µ–∫—Ç–æ–≤. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {sum(write_times) / len(write_times):.4f} —Å–µ–∫")

        # –ß—Ç–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        random.shuffle(object_keys)
        for key in object_keys:
            _, elapsed = measure_time(
                safe_call, s3.get_object, Bucket=bucket_name, Key=key
            )
            if elapsed:
                read_times.append(elapsed)

        print(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ {num_objects} –æ–±—ä–µ–∫—Ç–æ–≤. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {sum(read_times) / len(read_times):.4f} —Å–µ–∫")

        # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
        for key in object_keys:
            _, elapsed = measure_time(
                safe_call, s3.delete_object, Bucket=bucket_name, Key=key
            )
            if elapsed:
                delete_times.append(elapsed)

        print(f"–£–¥–∞–ª–µ–Ω–æ {num_objects} –æ–±—ä–µ–∫—Ç–æ–≤. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {sum(delete_times) / len(delete_times):.4f} —Å–µ–∫")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–∞–∫–µ—Ç –ø—É—Å—Ç–æ–π
        objects = safe_call(s3.list_objects_v2, Bucket=bucket_name)
        if objects and "Contents" in objects:
            print("–û—à–∏–±–∫–∞: –ë–∞–∫–µ—Ç –Ω–µ –ø—É—Å—Ç!")
        else:
            print("–ë–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.")

    # –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∫–µ—Ç–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π
    safe_call(s3.delete_bucket, Bucket=bucket_name)
    print(f"\n–ë–∞–∫–µ—Ç {bucket_name} —É–¥–∞–ª—ë–Ω.")

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == "__main__":
    if len(sys.argv) != 5:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 script.py <bucket_name> <num_objects> <object_size> <num_iterations>")
        sys.exit(1)

    bucket_name = sys.argv[1]
    num_objects = int(sys.argv[2])
    object_size = int(sys.argv[3])
    num_iterations = int(sys.argv[4])

    s3_test(bucket_name, num_objects, object_size, num_iterations)
–ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:
–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –±–∞–∫–µ—Ç –ø—É—Å—Ç–æ–π (–∑–∞–ø–∏—Å—å ‚Üí —á—Ç–µ–Ω–∏–µ ‚Üí —É–¥–∞–ª–µ–Ω–∏–µ).

–î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API S3 (safe_call).

–ú–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ–ø–µ—Ä—å –ø–æ –∫–∞–∂–¥–æ–º—É —ç—Ç–∞–ø—É (–∑–∞–ø–∏—Å—å, —á—Ç–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ).

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è os.urandom(object_size) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, —á—Ç–æ –±–∞–∫–µ—Ç –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤.

–í –∫–æ–Ω—Ü–µ –±–∞–∫–µ—Ç —É–¥–∞–ª—è–µ—Ç—Å—è.

–ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞:
bash
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
python3 script.py test-bucket 100 1024 3
–≠—Ç–æ—Ç —Ç–µ—Å—Ç —Å–æ–∑–¥–∞—Å—Ç –±–∞–∫–µ—Ç test-bucket, –≤—ã–ø–æ–ª–Ω–∏—Ç 3 –∏—Ç–µ—Ä–∞—Ü–∏–∏, –≤ –∫–∞–∂–¥–æ–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö 100 –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ 1024 –±–∞–π—Ç–∞ –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã, –ø—Ä–æ—á–∏—Ç–∞–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã. üíæüì•üì§







–í—ã —Å–∫–∞–∑–∞–ª–∏:
–î–æ–±–∞–≤—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ,  –¥–ª—è —Å–ª—É—á–∞—è –µ—Å–ª–∏ –∫–æ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –±–∞–∫–µ—Ç, –∞ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í —ç—Ç–æ —Å–ª—É—á–∞–µ –≤—ã–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º.


ChatGPT —Å–∫–∞–∑–∞–ª:
–Ø –¥–æ–±–∞–≤–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –µ—Å–ª–∏ –±–∞–∫–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ "–ë–∞–∫–µ—Ç <bucket_name> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", –∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.

–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥:
python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
import boto3
import os
import random
import time
import sys
from botocore.exceptions import BotoCoreError, ClientError

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
def measure_time(func, *args, **kwargs):
    start = time.time()
    result = func(*args, **kwargs)
    elapsed = time.time() - start
    return result, elapsed

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ API S3
def safe_call(func, *args, **kwargs):
    try:
        return func(*args, **kwargs)
    except (BotoCoreError, ClientError) as e:
        return e

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞
def s3_test(bucket_name, num_objects, object_size, num_iterations):
    s3 = boto3.client(
        "s3",
        endpoint_url="http://ceph-rgw.example.com",  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Ceph RadosGW
        aws_access_key_id="your-access-key",
        aws_secret_access_key="your-secret-key"
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    response = safe_call(s3.create_bucket, Bucket=bucket_name)
    if isinstance(response, ClientError) and response.response['Error']['Code'] == 'BucketAlreadyOwnedByYou':
        print(f"–ë–∞–∫–µ—Ç {bucket_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    elif isinstance(response, ClientError):
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∫–µ—Ç–∞: {response}")
        return

    for iteration in range(1, num_iterations + 1):
        print(f"\n=== –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration} ===")

        object_keys = []
        write_times, read_times, delete_times = [], [], []

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤
        for i in range(num_objects):
            key = f"object-{iteration}-{i}"
            object_keys.append(key)
            data = os.urandom(object_size)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            
            response, elapsed = measure_time(
                safe_call, s3.put_object, Bucket=bucket_name, Key=key, Body=data
            )
            if not isinstance(response, ClientError):
                write_times.append(elapsed)

        print(f"–ó–∞–ø–∏—Å–∞–Ω–æ {num_objects} –æ–±—ä–µ–∫—Ç–æ–≤. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {sum(write_times) / len(write_times):.4f} —Å–µ–∫")

        # –ß—Ç–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        random.shuffle(object_keys)
        for key in object_keys:
            response, elapsed = measure_time(
                safe_call, s3.get_object, Bucket=bucket_name, Key=key
            )
            if not isinstance(response, ClientError):
                read_times.append(elapsed)

        print(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ {num_objects} –æ–±—ä–µ–∫—Ç–æ–≤. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {sum(read_times) / len(read_times):.4f} —Å–µ–∫")

        # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
        for key in object_keys:
            response, elapsed = measure_time(
                safe_call, s3.delete_object, Bucket=bucket_name, Key=key
            )
            if not isinstance(response, ClientError):
                delete_times.append(elapsed)

        print(f"–£–¥–∞–ª–µ–Ω–æ {num_objects} –æ–±—ä–µ–∫—Ç–æ–≤. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {sum(delete_times) / len(delete_times):.4f} —Å–µ–∫")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–∞–∫–µ—Ç –ø—É—Å—Ç–æ–π
        objects = safe_call(s3.list_objects_v2, Bucket=bucket_name)
        if objects and "Contents" in objects:
            print("–û—à–∏–±–∫–∞: –ë–∞–∫–µ—Ç –Ω–µ –ø—É—Å—Ç!")
        else:
            print("–ë–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.")

    # –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∫–µ—Ç–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π
    safe_call(s3.delete_bucket, Bucket=bucket_name)
    print(f"\n–ë–∞–∫–µ—Ç {bucket_name} —É–¥–∞–ª—ë–Ω.")

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == "__main__":
    if len(sys.argv) != 5:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 script.py <bucket_name> <num_objects> <object_size> <num_iterations>")
        sys.exit(1)

    bucket_name = sys.argv[1]
    num_objects = int(sys.argv[2])
    object_size = int(sys.argv[3])
    num_iterations = int(sys.argv[4])

    s3_test(bucket_name, num_objects, object_size, num_iterations)
–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:
–î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è BucketAlreadyOwnedByYou –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∫–µ—Ç–∞.

–ï—Å–ª–∏ –±–∞–∫–µ—Ç —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —Ç–µ—Å—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.

–í —Å–ª—É—á–∞–µ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∫–µ—Ç–∞, —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è.

–¢–µ–ø–µ—Ä—å —Å–∫—Ä–∏–ø—Ç –±–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤ –∫ –Ω–∞–ª–∏—á–∏—é —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–∞–∫–µ—Ç–∞. üöÄ







–í—ã —Å–∫–∞–∑–∞–ª–∏:
–ù–∞–ø–∏—à–∏ –∫–æ–¥ –Ω–∞ python3 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ boto3 , –∫–æ—Ç–æ—Ä—ã–π –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ c–µph v17
1. —Å–æ–∑–¥–∞–µ—Ç –±–∞–∫–µ—Ç
2. –∑–∞–ø–æ–ª–Ω—è–µ—Ç –±–∞–∫–µ—Ç –æ–±—ä–µ–∫—Ç–∞–º–∏ ( –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –∑–∞–¥–∞–µ—Ç—Å—è –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ)
3. –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª, –≤ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±–∞–∫–µ—Ç–µ –ø–∞—Ä–∞–ª–µ–ª–ª—å–Ω–æ  —á–∏—Ç–∞–µ—Ç—Å—è N –æ–±—ä–µ–∫—Ç–æ–≤ (random), –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è M –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è K –æ–±—ä–µ–∫—Ç–æ–≤. N M K –∑–∞–¥–∞—é—Ç—Å—è –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã. –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ç—Ä–∞—Ü–∏–∏ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è.
4. –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–ª–∞–≤–∏—à–∏ q –∏–ª–∏ Q –∏–ª–∏ –π –∏–ª–∏ –ô
5. –í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤—Ä–µ–º—è –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏, —á—Ç–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –¥–∞–Ω–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∏ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏, —á—Ç–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∑–∞ –≤—Å–µ –ø—Ä–æ—à–µ–¥—à–∏–µ —Ü–∏–∫–ª—ã
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –ø—Ä–∏ –≤—ã–∑–æ–≤–µ api ceph radosgw


ChatGPT —Å–∫–∞–∑–∞–ª:
–í–æ—Ç –≥–æ—Ç–æ–≤—ã–π Python 3 —Å–∫—Ä–∏–ø—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º boto3, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ Ceph v17.

python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
import boto3
import os
import random
import time
import sys
import threading
import signal
from botocore.exceptions import BotoCoreError, ClientError

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–∏–∫–ª–∞
stop_flag = False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
def signal_handler(sig, frame):
    global stop_flag
    stop_flag = True
    print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

# –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
def measure_time(func, *args, **kwargs):
    start = time.time()
    try:
        result = func(*args, **kwargs)
        elapsed = time.time() - start
        return result, elapsed
    except (BotoCoreError, ClientError) as e:
        return e, None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ API S3
def safe_call(func, *args, **kwargs):
    try:
        return func(*args, **kwargs)
    except (BotoCoreError, ClientError) as e:
        return e

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å S3
def s3_test(bucket_name, num_init_objects, object_size, num_read, num_write, num_update):
    global stop_flag

    s3 = boto3.client(
        "s3",
        endpoint_url="http://ceph-rgw.example.com",  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Ceph RadosGW
        aws_access_key_id="your-access-key",
        aws_secret_access_key="your-secret-key"
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è)
    response = safe_call(s3.create_bucket, Bucket=bucket_name)
    if isinstance(response, ClientError) and response.response['Error']['Code'] == 'BucketAlreadyOwnedByYou':
        print(f"–ë–∞–∫–µ—Ç {bucket_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    elif isinstance(response, ClientError):
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∫–µ—Ç–∞: {response}")
        return

    object_keys = []
    total_write_times, total_read_times, total_update_times = [], [], []
    iteration = 0

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∫–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
    print(f"–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∫–µ—Ç–∞ {bucket_name} {num_init_objects} –æ–±—ä–µ–∫—Ç–∞–º–∏...")
    for i in range(num_init_objects):
        key = f"init-object-{i}"
        object_keys.append(key)
        data = os.urandom(object_size)
        safe_call(s3.put_object, Bucket=bucket_name, Key=key, Body=data)

    print("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

    while not stop_flag:
        iteration += 1
        print(f"\n=== –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration} ===")

        # –°–ø–∏—Å–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω –æ–ø–µ—Ä–∞—Ü–∏–π
        write_times, read_times, update_times = [], [], []

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        def write_objects():
            for i in range(num_write):
                key = f"object-{iteration}-{i}"
                object_keys.append(key)
                data = os.urandom(object_size)
                response, elapsed = measure_time(
                    safe_call, s3.put_object, Bucket=bucket_name, Key=key, Body=data
                )
                if elapsed:
                    write_times.append(elapsed)

        # –ß—Ç–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        def read_objects():
            for key in random.sample(object_keys, min(num_read, len(object_keys))):
                response, elapsed = measure_time(
                    safe_call, s3.get_object, Bucket=bucket_name, Key=key
                )
                if elapsed:
                    read_times.append(elapsed)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        def update_objects():
            for key in random.sample(object_keys, min(num_update, len(object_keys))):
                data = os.urandom(object_size)
                response, elapsed = measure_time(
                    safe_call, s3.put_object, Bucket=bucket_name, Key=key, Body=data
                )
                if elapsed:
                    update_times.append(elapsed)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        threads = [
            threading.Thread(target=write_objects),
            threading.Thread(target=read_objects),
            threading.Thread(target=update_objects)
        ]

        for t in threads:
            t.start()
        for t in threads:
            t.join()

        # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        avg_write = sum(write_times) / len(write_times) if write_times else 0
        avg_read = sum(read_times) / len(read_times) if read_times else 0
        avg_update = sum(update_times) / len(update_times) if update_times else 0

        total_write_times.extend(write_times)
        total_read_times.extend(read_times)
        total_update_times.extend(update_times)

        avg_total_write = sum(total_write_times) / len(total_write_times) if total_write_times else 0
        avg_total_read = sum(total_read_times) / len(total_read_times) if total_read_times else 0
        avg_total_update = sum(total_update_times) / len(total_update_times) if total_update_times else 0

        print(f"–ó–∞–ø–∏—Å–∞–Ω–æ {num_write} –æ–±—ä–µ–∫—Ç–æ–≤. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_write:.4f} —Å–µ–∫, –û–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ: {avg_total_write:.4f} —Å–µ–∫")
        print(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ {num_read} –æ–±—ä–µ–∫—Ç–æ–≤. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_read:.4f} —Å–µ–∫, –û–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ: {avg_total_read:.4f} —Å–µ–∫")
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {num_update} –æ–±—ä–µ–∫—Ç–æ–≤. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_update:.4f} —Å–µ–∫, –û–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ: {avg_total_update:.4f} —Å–µ–∫")

        # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\n–ù–∞–∂–º–∏—Ç–µ 'q' –∏–ª–∏ '–π' –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        user_input = input()
        if user_input.lower() in ["q", "–π"]:
            stop_flag = True

    print("\n–û—á–∏—Å—Ç–∫–∞ –±–∞–∫–µ—Ç–∞...")
    for key in object_keys:
        safe_call(s3.delete_object, Bucket=bucket_name, Key=key)

    safe_call(s3.delete_bucket, Bucket=bucket_name)
    print(f"–ë–∞–∫–µ—Ç {bucket_name} —É–¥–∞–ª—ë–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == "__main__":
    if len(sys.argv) != 7:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 script.py <bucket_name> <num_init_objects> <object_size> <num_read> <num_write> <num_update>")
        sys.exit(1)

    bucket_name = sys.argv[1]
    num_init_objects = int(sys.argv[2])
    object_size = int(sys.argv[3])
    num_read = int(sys.argv[4])
    num_write = int(sys.argv[5])
    num_update = int(sys.argv[6])

    s3_test(bucket_name, num_init_objects, object_size, num_read, num_write, num_update)
–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
–°–æ–∑–¥–∞—ë—Ç –±–∞–∫–µ—Ç (–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–Ω).

–ó–∞–ø–æ–ª–Ω—è–µ—Ç –±–∞–∫–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏.

–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª:

–ß–∏—Ç–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (num_read).

–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã (num_write).

–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (num_update).

–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –ø–æ–º–æ—â—å—é threading.Thread.

–í—ã—Ö–æ–¥ –ø–æ –Ω–∞–∂–∞—Ç–∏—é "q" –∏–ª–∏ "–π".

–í—ã–≤–æ–¥–∏—Ç —Å—Ä–µ–¥–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏, —á—Ç–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.

–û—á–∏—â–∞–µ—Ç –±–∞–∫–µ—Ç –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º.

–ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞:
bash
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
python3 script.py my-bucket 100 1024 5 5 5
my-bucket ‚Äî –∏–º—è –±–∞–∫–µ—Ç–∞

100 ‚Äî –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤

1024 ‚Äî —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ (1 –ö–ë)

5 ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á—Ç–µ–Ω–∏–π –∑–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é

5 ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∑–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é

5 ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Ceph RadosGW. üöÄ







–í—ã —Å–∫–∞–∑–∞–ª–∏:
–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è q (Q q –ô) –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è. –¢–æ –µ—Å—Ç—å —Ü–∏–∫–ª —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∞ –¥–æ —Ç–µ—Ö –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –Ω–∞–∂–∞—Ç–∞ –æ–¥–Ω–∞ –∏–∑ —ç—Ç–∏—Ö –∫–ª–∞–≤–∏—à.
–î–æ–±–∞–≤—å —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –±–∞–∫–µ—Ç–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã.
–î–æ–±–∞–≤—å —Ç–∞–∫–∂–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç Ctl-C –∏ —Å–¥–µ–ª–∞–π —Ä–µ–∞–∫—Ü–∏ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ ctrl-C –∫–∞–∫ –Ω–∞ q Q –π –ô


ChatGPT —Å–∫–∞–∑–∞–ª:
–Ø –æ–±–Ω–æ–≤–∏–ª –∫–æ–¥, –¥–æ–±–∞–≤–∏–≤:

–û–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ü–∏–∫–ª–∞ —Å –ø–æ–º–æ—â—å—é threading.Thread –∏ sys.stdin.read().

–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –±–∞–∫–µ—Ç–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã.

–û–±—Ä–∞–±–æ—Ç–∫—É Ctrl-C (SIGINT) —Ç–∞–∫ –∂–µ, –∫–∞–∫ q, Q, –π, –ô.

–í–æ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥:

python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
import boto3
import os
import random
import time
import sys
import threading
import signal
import termios
import tty
from botocore.exceptions import BotoCoreError, ClientError

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–∏–∫–ª–∞
stop_flag = False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl-C)
def signal_handler(sig, frame):
    global stop_flag
    stop_flag = True
    print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

# –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ SIGINT (Ctrl-C)
signal.signal(signal.SIGINT, signal_handler)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ API S3
def safe_call(func, *args, **kwargs):
    try:
        return func(*args, **kwargs)
    except (BotoCoreError, ClientError) as e:
        return e

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
def key_listener():
    global stop_flag
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setcbreak(fd)  # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –≤ —Ä–µ–∂–∏–º –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è Enter
        while not stop_flag:
            ch = sys.stdin.read(1)
            if ch.lower() in ["q", "–π"]:
                stop_flag = True
                print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                break
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å S3
def s3_test(bucket_name, num_init_objects, object_size, num_read, num_write, num_update):
    global stop_flag

    s3 = boto3.client(
        "s3",
        endpoint_url="http://ceph-rgw.example.com",  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Ceph RadosGW
        aws_access_key_id="your-access-key",
        aws_secret_access_key="your-secret-key"
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è)
    response = safe_call(s3.create_bucket, Bucket=bucket_name)
    if isinstance(response, ClientError) and response.response['Error']['Code'] == 'BucketAlreadyOwnedByYou':
        print(f"–ë–∞–∫–µ—Ç {bucket_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    elif isinstance(response, ClientError):
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∫–µ—Ç–∞: {response}")
        return

    object_keys = []
    total_write_times, total_read_times, total_update_times = [], [], []
    iteration = 0

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∫–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
    print(f"–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∫–µ—Ç–∞ {bucket_name} {num_init_objects} –æ–±—ä–µ–∫—Ç–∞–º–∏...")
    for i in range(num_init_objects):
        key = f"init-object-{i}"
        object_keys.append(key)
        data = os.urandom(object_size)
        safe_call(s3.put_object, Bucket=bucket_name, Key=key, Body=data)

    print("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
    key_thread = threading.Thread(target=key_listener, daemon=True)
    key_thread.start()

    while not stop_flag:
        iteration += 1
        print(f"\n=== –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration} ===")

        # –°–ø–∏—Å–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω –æ–ø–µ—Ä–∞—Ü–∏–π
        write_times, read_times, update_times = [], [], []

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        def write_objects():
            for i in range(num_write):
                key = f"object-{iteration}-{i}"
                object_keys.append(key)
                data = os.urandom(object_size)
                start_time = time.time()
                safe_call(s3.put_object, Bucket=bucket_name, Key=key, Body=data)
                write_times.append(time.time() - start_time)

        # –ß—Ç–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        def read_objects():
            for key in random.sample(object_keys, min(num_read, len(object_keys))):
                start_time = time.time()
                safe_call(s3.get_object, Bucket=bucket_name, Key=key)
                read_times.append(time.time() - start_time)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        def update_objects():
            for key in random.sample(object_keys, min(num_update, len(object_keys))):
                data = os.urandom(object_size)
                start_time = time.time()
                safe_call(s3.put_object, Bucket=bucket_name, Key=key, Body=data)
                update_times.append(time.time() - start_time)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        threads = [
            threading.Thread(target=write_objects),
            threading.Thread(target=read_objects),
            threading.Thread(target=update_objects)
        ]

        for t in threads:
            t.start()
        for t in threads:
            t.join()

        # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        avg_write = sum(write_times) / len(write_times) if write_times else 0
        avg_read = sum(read_times) / len(read_times) if read_times else 0
        avg_update = sum(update_times) / len(update_times) if update_times else 0

        total_write_times.extend(write_times)
        total_read_times.extend(read_times)
        total_update_times.extend(update_times)

        avg_total_write = sum(total_write_times) / len(total_write_times) if total_write_times else 0
        avg_total_read = sum(total_read_times) / len(total_read_times) if total_read_times else 0
        avg_total_update = sum(total_update_times) / len(total_update_times) if total_update_times else 0

        print(f"–ó–∞–ø–∏—Å–∞–Ω–æ {num_write} –æ–±—ä–µ–∫—Ç–æ–≤. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_write:.4f} —Å–µ–∫, –û–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ: {avg_total_write:.4f} —Å–µ–∫")
        print(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ {num_read} –æ–±—ä–µ–∫—Ç–æ–≤. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_read:.4f} —Å–µ–∫, –û–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ: {avg_total_read:.4f} —Å–µ–∫")
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {num_update} –æ–±—ä–µ–∫—Ç–æ–≤. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_update:.4f} —Å–µ–∫, –û–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ: {avg_total_update:.4f} —Å–µ–∫")

    print("\n–û—á–∏—Å—Ç–∫–∞ –±–∞–∫–µ—Ç–∞...")
    for key in object_keys:
        safe_call(s3.delete_object, Bucket=bucket_name, Key=key)

    safe_call(s3.delete_bucket, Bucket=bucket_name)
    print(f"–ë–∞–∫–µ—Ç {bucket_name} —É–¥–∞–ª—ë–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == "__main__":
    if len(sys.argv) != 7:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 script.py <bucket_name> <num_init_objects> <object_size> <num_read> <num_write> <num_update>")
        sys.exit(1)

    bucket_name = sys.argv[1]
    num_init_objects = int(sys.argv[2])
    object_size = int(sys.argv[3])
    num_read = int(sys.argv[4])
    num_write = int(sys.argv[5])
    num_update = int(sys.argv[6])

    s3_test(bucket_name, num_init_objects, object_size, num_read, num_write, num_update)
–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:
–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à (q, Q, –π, –ô, Ctrl-C)

key_listener() —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à–∏.

sys.stdin.read(1) —Ç–µ–ø–µ—Ä—å –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞.

–û–±—Ä–∞–±–æ—Ç–∞–Ω Ctrl-C (SIGINT)

–¢–µ–ø–µ—Ä—å –ø—Ä–∏ Ctrl-C –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.

–ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—á–∏—â–∞—é—Ç—Å—è –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤ –±–∞–∫–µ—Ç–µ

–í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª—è—é—Ç—Å—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –±–∞–∫–µ—Ç–∞.

–ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞
bash
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
python3 script.py my-bucket 100 1024 5 5 5
–¢–µ–ø–µ—Ä—å —Å–∫—Ä–∏–ø—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ü–∏–∫–ª–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ –Ω–∞–∂–∞—Ç–∏—é q, –π –∏–ª–∏ Ctrl-C. üöÄ

